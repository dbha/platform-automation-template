resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: terraform-state
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: terraform-(.*).tfstate
    skip_ssl_verification: true


- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true


- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true

- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((foundation))-installation
    regexp: ((foundation))-installation-(.*).zip
    skip_ssl_verification: true



## used for manual trigger serial jobs using manual version controls.
- name: pipeline-trigger-version-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch)) # should create this branch inadvance
    file: configs/((foundation))/pipeline-trigger-${BUILD_PIPELINE_NAME} # will create if not exists
    private_key:  ((git.private_key))

- name: platform-automation-pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: ((git.platform_automation_pipelines.branch))
    skip_ssl_verification: true  

- name: platform-automation-configs
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true  

- name: opsman_vm_state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true
    paths: [ "configs/((foundation))/state/state.yml" ]


## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: opsman-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: ((foundation))/products/versions.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"

- name: tas-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: ((foundation))/products/versions.yml
    config_path: products.tas
    version_path: products.tas.product-version
    version_pattern: "m.n.p"


- name: healthwatch-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: ((foundation))/products/versions.yml
    config_path: products.healthwatch
    version_path: products.healthwatch.product-version
    version_pattern: "m.n.p"


credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: platform-automation-configs
  params:
    #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
    CREDHUB_CA_CERT: ""
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub.server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: ((foundation))
    SKIP_MISSING: false


prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: platform-automation-configs
  params:
    CONFIG_PATHS: config/((foundation))/opsman config/((foundation))/products
    VARS_PATHS: config/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

## injects params to tasks for 'semver-config.yaml' file which is auto-generated by 'semver-config' reource type.
prepare-tasks-with-secrets-for-product-version: &prepare-tasks-with-secrets-for-product-version
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-pipelines
    config: tas-version-git 
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
  output_mapping:
    tasks: platform-automation-pipelines

opsman-state-make-commit: &opsman-state-make-commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: platform-automation-configs
    file-source: generated-state
  output_mapping:
    repository-commit: configuration-commit
  params:
    FILE_SOURCE_PATH: state.yml
    FILE_DESTINATION_PATH: ((foundation))/state/state.yml
    GIT_AUTHOR_EMAIL: ((git.user.email))
    GIT_AUTHOR_NAME: ((git.user.username))
    COMMIT_MESSAGE: "Update from upgrade-opsman"


jobs:

- name: fetch-platform-automation
  serial: true
  serial_groups: [serial-jobs]
  plan:
    - get: platform-automation-pivnet
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/platform-automation-tasks-*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/platform-automation-image-*.tgz

- name: prepare-credhub-secrets-from-terraform-state
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: terraform-state
  - do:
    - task: prepare-credhub-secrets-from-terraform-state
      file: platform-automation-pipelines/tasks/prepare-credhub-secrets-from-terraform-state.yml
      input_mapping:
        config: platform-automation-configs 
      params:
        #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
        CREDHUB_CA_CERT: ""
        CREDHUB_SECRET: ((credhub_client.password))
        CREDHUB_CLIENT: ((credhub_client.username))
        CREDHUB_SERVER: ((credhub.server))
        TERRAFORM_STATE_FILE_PATH: terraform-state/terraform-1.0.0.tfstate
        PREFIX: /concourse/main
        FOUNDATION_PREFIX: ((foundation))_
        SKIP_TLS_VALIDATION: true
        SHELL_FILE_FOR_CREDHUB_KEY_LIST: config/((foundation))/pipeline-vars/prepare-credhub-secrets-from-terraform-state.sh



- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-tasks-with-secrets-for-product-version
      <<: *prepare-tasks-with-secrets-for-product-version
      input_mapping:
        tasks: platform-automation-pipelines
        config: opsman-version-git 

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks-for-product-version/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    ## if VM already exists, not attempting to create it, and return true.
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-product 
        config: platform-automation-configs # for products/ops-manager.yml
        vars: platform-automation-configs
        state: platform-automation-configs # git repo, have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
      params:
        OPSMAN_CONFIG_FILE: ((foundation))/opsman/opsman.yml
        VARS_FILES: vars/((foundation))/vars/opsman.yml
        STATE_FILE: ((foundation))/state/state.yml
      on_success:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from  create-vm job"
          - put: platform-automation-configs
            params:
              repository: configuration-commit
              merge: true

- name: configure-authentication
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
      passed: [install-opsman]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: platform-automation-configs
        config: platform-automation-configs
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        AUTH_CONFIG_FILE: ((foundation))/opsman/auth.yml


- name: apply-director-changes
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
      passed: [configure-authentication]
      #trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: platform-automation-configs
        config: platform-automation-configs
        vars: platform-automation-configs
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: ((foundation))/opsman/director.yml
        VARS_FILES: vars/((foundation))/vars/director.yml

    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: platform-automation-configs  
      params:
        ENV_FILE: ((foundation))/opsman/env.yml

    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}


- name: install-and-patch-tas
  serial: true
  #serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: tas-version-git

  - do:    
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-tasks-with-secrets-for-product-version
      <<: *prepare-tasks-with-secrets-for-product-version
      input_mapping:
        tasks: platform-automation-pipelines
        config: tas-version-git 

    - task: download-product
      image: platform-automation-image
      file: platform-automation-pipelines/tasks/download-product.yml
      input_mapping:
        config: tas-version-git  
        vars: platform-automation-configs
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.
        VARS_FILES: vars/((foundation))/vars/tas.yml
              
    
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: downloaded-product
        env: platform-automation-configs
      params:
        ENV_FILE: ((foundation))/opsman/env.yml

    - task: upload-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        stemcell: downloaded-stemcell
        env: platform-automation-configs
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        FLOATING_STEMCELL: false

    - task: stage-configure-apply
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-configure-apply.yml
      input_mapping:
        product: downloaded-product
        env: platform-automation-configs
        config: platform-automation-configs
      params:
        CONFIG_FILE: ((foundation))/products/tas.yml



- name: install-and-patch-healthwatch
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [install-and-patch-tas ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: healthwatch-version-git

  - do:    
    - task: credhub-interpolate
      <<: *credhub-interpolate

    - task: prepare-tasks-with-secrets-for-product-version
      <<: *prepare-tasks-with-secrets-for-product-version

    - task: download-product
      image: platform-automation-image
      file: platform-automation-pipelines/tasks/download-product.yml
      input_mapping:
        config: healthwatch-version-git  
        vars: interpolated-files
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.
        VARS_FILES: vars/((foundation))/vars/healthwatch.yml
              
    
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: downloaded-product
        env: interpolated-files
      params:
        ENV_FILE: ((foundation))/opsman/env.yml

    - task: upload-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        stemcell: downloaded-stemcell
        env: interpolated-files
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        FLOATING_STEMCELL: false

    - task: stage-configure-apply
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-configure-apply.yml
      input_mapping:
        product: downloaded-product
        env: interpolated-files
        config: interpolated-files
      params:
        CONFIG_FILE: ((foundation))/products/healthwatch.yml



- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-tasks-with-secrets-for-product-version
      <<: *prepare-tasks-with-secrets-for-product-version



    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks-for-product-version/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: platform-automation-configs
      params:
        ENV_FILE: ((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product 
        state: platform-automation-configs
        config: platform-automation-configs # for products/ops-manager.yml
        env: platform-automation-configs
      params:
        OPSMAN_CONFIG_FILE: ((foundation))/opsman/opsman.yml
        VARS_FILES: vars/((foundation))/vars/opsman.yml
        STATE_FILE: ((foundation))/state/state.yml
        INSTALLATION_FILE: installation/((foundation))-installation*.zip
      ensure:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from upgrade-opsman"
          - put: platform-automation-configs
            params:
              repository: configuration-commit
              merge: true



- name: delete-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: platform-automation-configs
        state: opsman_vm_state
        vars: platform-automation-configs
      params:
        OPSMAN_CONFIG_FILE: ((foundation))/opsman/opsman.yml
        VARS_FILES: vars/((foundation))/vars/opsman.yml
        STATE_FILE: ((foundation))/state/state.yml
      ensure: 
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: 'Update from ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
          - put: platform-automation-configs
            params:
              repository: configuration-commit
              merge: true
