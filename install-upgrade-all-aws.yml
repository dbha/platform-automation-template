resource_types:
- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:

## used for manual trigger serial jobs using manual version controls.
- name: pipeline-trigger-version-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master # should create this branch inadvance
    file: configs/((foundation))/pipeline-${BUILD_PIPELINE_NAME} # will create if not exists
    private_key:  ((git.private_key))

## for git push
- name: git-image
  type: docker-image
  source: {repository: bitnami/git}

- name: platform-automation-pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: master
    skip_ssl_verification: true  

- name: platform-automation-configs
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: master
    skip_ssl_verification: true  

- name: opsman_vm_state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: master
    skip_ssl_verification: true
    paths: [ "configs/((foundation))/state/state.yml" ]


## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: opsman-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"

- name: tas-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.tas
    version_path: products.tas.product-version
    version_pattern: "m.n.p"

- name: healthwatch-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: configs/((foundation))/products/versions.yml
    config_path: products.healthwatch
    version_path: products.healthwatch.product-version
    version_pattern: "m.n.p"

credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: platform-auto-config
  params:
    CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub_server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: ((foundation))/configs ((foundation))/vars
    SKIP_MISSING: false

## injects params to tasks for 'semver-config.yaml' file which is auto-generated by 'semver-config' reource type.
prepare-tasks-with-secrets-for-product-version: &prepare-tasks-with-secrets-for-product-version
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  params:
    CONFIG_PATHS: config # semver-config.yaml path.
  output_mapping:
    tasks: platform-automation-tasks


jobs:

- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
    - get: git-image
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: opsman-version-git

  - do:
    - task: credhub-interpolate
      <<: *credhub-interpolate

    - task: prepare-tasks-with-secrets-for-product-version
      <<: *prepare-tasks-with-secrets-for-product-version

    - task: download-product
      image: platform-automation-image
      file: platform-automation-pipelines/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
        vars: interpolated-files
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.
       # VARS_FILES: vars/((foundation))/vars/global.yml
              
    ## if VM already exists, not attempting to create it, and return true.
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-files ## moving big files is slow. this file doesn't move. and will use 'downloaded-files' as it is
        state: platform-automation-configs # git repo, have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
        config: interpolated-files # for products/ops-manager.yml
        vars: interpolated-files
      params:
        OPSMAN_CONFIG_FILE: ((foundation))/products/opsman.yml
        #VARS_FILES: vars/((foundation))/vars/opsman.yml
        STATE_FILE: ((foundation))/state/state.yml
      
      on_success: &make-state-commit
        do:
          - task: make-commit
            image: platform-automation-image
            file: platform-automation-tasks/tasks/make-git-commit.yml
            input_mapping:
              repository: platform-automation-configs
              file-source: generated-state
            output_mapping:
              repository-commit: configuration-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: 'Update from ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
          - put: platform-automation-configs
            params:
              repository: configuration-commit
              merge: true
    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}

- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: {bump: patch}
    - get: git-image
    - get: platform-automation-pipelines
    - get: platform-automation-configs
    - get: opsman-version-git

  - do:    
    - task: recreate-vm
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform-automation-pipelines
        - name: platform-automation-configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo "date upgrade opsman-vm done " > generated-state/state.yml
            date >> generated-state/state.yml
      ensure:
        do:
          - task: make-commit
            image: git-image
            file: platform-automation-pipelines/tasks/make-git-commit.yml
            input_mapping:
              platform-automation-tasks: platform-automation-pipelines
              repository: platform-automation-configs
              file-source: generated-state
            output_mapping:
              repository-commit: config-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: configs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: "user@test.io"
              GIT_AUTHOR_NAME: "Platform Automation Toolkit Bot"
              COMMIT_MESSAGE: '[Platform Automation] upgrade state file'
          - put: platform-automation-configs
            params:
              repository: config-commit
              merge: true
    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version} ## the filename is always 'version'

- name: install-and-patch-tas
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
    - get: platform-automation-configs
    - get: tas-version-git
    - get: opsman_vm_state ## this is for trigger in case of 'install-opsman' or 'upgrade-opsman'
    #  trigger: true

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform-automation-configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo "upgrade tas done" 
      


- name: install-and-patch-service-a-1
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-configs
    - get: service-a-1-version-git

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform-automation-configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      

- name: install-and-patch-service-a-2
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-service-a-1 ]
    - get: platform-automation-configs
    - get: service-a-2-version-git

  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform-automation-configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      

- name: install-and-patch-service-b
  serial: true
  serial_groups: [serial-jobs]
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ install-and-patch-tas ]
    - get: platform-automation-configs
    - get: service-b-version-git
   
  - do:    
    - task: patch
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: ubuntu}
        inputs:
        - name: platform-automation-configs
        outputs:
        - name: generated-state
        run: 
          path: bash
          args:
          - -c
          - |
            find .
            echo "**************************************"
            echo " done" 
      
