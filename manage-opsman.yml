resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:

- name: bbr-release-pivnet
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: p-bosh-backup-and-restore
    product-version: ^1\.5\..*$


- name: bbr-director-backup-bucket
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.bbr-backup))
    regexp: ((foundation))-director-backup_(.*).tar
    skip_ssl_verification: true


- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true


- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.platform_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true

- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.installation))
    regexp: ((foundation))-installation-(.*).zip
    skip_ssl_verification: true


## used for manual trigger serial jobs using manual version controls.
- name: pipeline-trigger-version-git
  type: semver
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch)) # should create this branch inadvance
    file: envs/((foundation))/pipeline-trigger-manage-platform # will create if not exists
    private_key:  ((git.private_key))

- name: pipelines
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: ((git.platform_automation_pipelines.branch))
    skip_ssl_verification: true  

- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true  

- name: opsman_vm_state
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    skip_ssl_verification: true
    paths: [ "envs/((foundation))/state/state.yml" ]

## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: opsman-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_configs.uri))
    branch: ((git.platform_automation_configs.branch))
    private_key: ((git.private_key))
    config_file: envs/((foundation))/versions.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"


credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    #CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
    CREDHUB_CA_CERT: ""
    CREDHUB_SECRET: ((credhub_client.password))
    CREDHUB_CLIENT: ((credhub_client.username))
    CREDHUB_SERVER: ((credhub.server))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: envs/((foundation))
    SKIP_MISSING: false


prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks


prepare-tasks-with-product-version: &prepare-tasks-with-product-version
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: opsman-version-git
    vars: configuration
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
    VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks



prepare-custom-tasks-with-secrets: &prepare-custom-tasks-with-secrets
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/envs/((foundation))/opsman config/envs/((foundation))/products
    VARS_PATHS: vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks
  output_mapping:
    tasks: pipelines



## injects params from 'semver-config.yaml' to task files
prepare-custom-tasks-with-product-version: &prepare-custom-tasks-with-product-version
  image: platform-automation-image
  file: pipelines/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: pipelines
    vars: configuration
    config: opsman-version-git 
  params:
    CONFIG_PATHS: config # semver-config-resource auto-generates folder for semver-config.yml.
    VARS_PATHS:  vars/envs/((foundation))/generated-vars vars/envs/((foundation))/vars
    TASKS_PATH: tasks/tasks # only for pipelines tasks
  output_mapping:
    tasks: platform-automation-tasks

opsman-state-make-commit: &opsman-state-make-commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: configuration
    file-source: generated-state
  output_mapping:
    repository-commit: configuration-commit
  params:
    FILE_SOURCE_PATH: state.yml
    FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
    GIT_AUTHOR_EMAIL: ((git.user.email))
    GIT_AUTHOR_NAME: ((git.user.username))
    COMMIT_MESSAGE: "Update from upgrade-opsman"
    
stage-configure-apply: &stage-configure-apply
  image: platform-automation-image
  file: platform-automation-tasks/tasks/stage-configure-apply.yml
  input_mapping:
    product: downloaded-product
    env: configuration
    config: configuration
  params:
    #CONFIG_FILE: envs/((foundation))/products/pks.yml
    ENV_FILE: envs/((foundation))/opsman/env.yml
    #VARS_FILES: config/envs/((foundation))/vars/pks.yml

echo-files: &echo-files
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: ubuntu
    inputs:
    - name: files
    params:
      FILE: 
    run:
      path: bash
      args:
      - -exc
      - |
        cat $FILE


#################################################################


jobs:

- name: install-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-tasks-with-product-version
      <<: *prepare-tasks-with-product-version
      input_mapping:
        tasks: platform-automation-tasks
        config: opsman-version-git
        vars: configuration

    - task: echo
      <<: *echo-files
      input_mapping:
        files: platform-automation-tasks
      params:
        FILE: files/tasks/download-product.yml

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git
        vars: configuration
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.
        VARS_FILES: vars/envs/((foundation))/vars/versions.yml

    ## if VM already exists, not attempting to create it, and return true.
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: downloaded-product 
        config: configuration # for products/ops-manager.yml
        vars: configuration
        state: configuration # git repo, have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      on_success:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from  create-vm job"
          - put: configuration
            params:
              repository: configuration-commit
              merge: true

- name: configure-opsman-authentication
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [install-opsman]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: configuration
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        AUTH_CONFIG_FILE: envs/((foundation))/opsman/auth.yml

- name: configure-director
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [configure-opsman-authentication]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml


- name: configure-director-only
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
     # passed: [configure-opsman-authentication]
     # trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        env: configuration
        config: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        DIRECTOR_CONFIG_FILE: envs/((foundation))/opsman/director.yml
        VARS_FILES: vars/envs/((foundation))/vars/director.yml



## for aws LB setting.
- name: opsman-custom-vm-extensions
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      passed: [ configure-director ]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    #for cloud such aws
    - task: opsman-custom-vm-extensions-for-lb-security-groups
      image: platform-automation-image
      file: pipelines/tasks/opsman-custom-vm-extensions.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml


- name: apply-director-changes
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 100

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      params: { bump: patch }
      passed: [ opsman-custom-vm-extensions ]
      #trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
  - do:

    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml

    - put: pipeline-trigger-version-git
      params: {file: pipeline-trigger-version-git/version}



- name: upgrade-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: opsman-version-git
        vars: configuration

    - task: download-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: opsman-version-git  
      params:
        CONFIG_FILE: semver-config.yaml # semver-config.yaml is output of 'opsman-version-git' resource.

    # will be used in upgrade-opsman task.
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: downloaded-product 
        state: configuration
        config: configuration # for products/ops-manager.yml
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        STATE_FILE: envs/((foundation))/state/state.yml
        INSTALLATION_FILE: envs/((foundation))-installation*.zip
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
      ensure:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from upgrade-opsman"
          - put: configuration
            params:
              repository: configuration-commit
              merge: true


- name: export-installation
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: prepare-custom-tasks-with-product-version
      <<: *prepare-custom-tasks-with-product-version
      input_mapping:
        tasks: pipelines
        config: opsman-version-git 
        vars: configuration

    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip

    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

- name: extract-director-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
      trigger: true
      passed: [ apply-director-changes ]

    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration

  - do:    

    - task: prepare-custom-tasks-with-secrets
      <<: *prepare-custom-tasks-with-secrets

    - task: staged-config
      image: platform-automation-image
      file: pipelines/tasks/staged-director-config.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    - task: check
      <<: *echo-files
      input_mapping:
        generated-config: generated-config
      params:
        FILE: generated-config/*.yml

- name: bbr-backup-director
  serial: true
  serial_groups: [ bbr-backup ]
  plan:
  - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: pipelines
      - get: configuration
      - get: bbr-release-pivnet
        params:
          globs: [ "bbr-*-linux-*"]
  - do:
      - task: prepare-custom-tasks-with-secrets
        <<: *prepare-custom-tasks-with-secrets

      - task: bbr-backup
        file: pipelines/tasks/bbr-backup-director.yml
        input_mapping:
          bbr-release: bbr-release-pivnet
          config: configuration
        params:
          ENV_FILE: envs/((foundation))/opsman/env.yml
          FOUNDATION: ((foundation))
        on_failure:
          task: bbr-cleanup
          file: pipelines/tasks/bbr-cleanup-director.yml
          input_mapping:
            bbr-release: bbr-release-pivnets
            config: configuration
          params:
            ENV_FILE: envs/((foundation))/opsman/env.yml
      - put: bbr-director-backup-bucket
        params:
          file: backup-artifact/((foundation))-director-backup_*.tgz



- name: delete-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
    days: 2
    builds: 1000

  plan:
  - in_parallel:
    - get: pipeline-trigger-version-git
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pipelines
    - get: configuration
    - get: opsman-version-git
    - get: opsman_vm_state

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
        state: opsman_vm_state
        vars: configuration
      params:
        OPSMAN_CONFIG_FILE: envs/((foundation))/opsman/opsman.yml
        VARS_FILES: vars/envs/((foundation))/vars/opsman.yml
        STATE_FILE: envs/((foundation))/state/state.yml
      ensure:
        do:
          - task: make-commit
            <<: *opsman-state-make-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: envs/((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Update from "
          - put: configuration
            params:
              repository: configuration-commit
              merge: true


- name: delete-installation-from-opsman
  serial: true
  serial_groups: [serial-jobs]
  build_log_retention:
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration

  - do:
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets

    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        config: configuration
      params:
        ENV_FILE: envs/((foundation))/opsman/env.yml
